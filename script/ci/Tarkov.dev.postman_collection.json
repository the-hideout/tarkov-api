{
	"info": {
		"_postman_id": "28edd5a5-9149-48f9-bd18-ab13278455e8",
		"name": "Tarkov.dev",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Ammo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status correct\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Has correct data\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"caliber\");\r",
							"    pm.expect(pm.response.text()).to.include(\"heavyBleedModifier\");\r",
							"});\r",
							"\r",
							"pm.test(\"No errors\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"errors\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct ammo common types\", function () {\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.id).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.name).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.normalizedName).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.shortName).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.basePrice).to.be.a(\"number\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.updated).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.width).to.be.a(\"number\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.height).to.be.a(\"number\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.iconLink).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.iconLinkFallback).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.wikiLink).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.imageLink).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.imageLinkFallback).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.gridImageLink).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.gridImageLinkFallback).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.types).to.be.a(\"array\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.avg24hPrice).to.be.a(\"number\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.link).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.sellFor).to.be.a(\"array\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.buyFor).to.be.a(\"array\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.bsgCategoryId).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.ammo[0].item.weight).to.be.a(\"number\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\r\n    ammo {\r\n        item {\r\n            ...itemFragment\r\n            }\r\n        caliber\r\n            heavyBleedModifier\r\n                }\r\n}\r\n{{itemFragment}}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{tarko.dev.api}}",
					"host": [
						"{{tarko.dev.api}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Barters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status correct\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Has correct data\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"requiredItems\");\r",
							"    pm.expect(pm.response.text()).to.include(\"rewardItems\");\r",
							"});\r",
							"\r",
							"pm.test(\"No errors\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"errors\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct ammo common types\", function () {\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.id).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.name).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.normalizedName).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.shortName).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.basePrice).to.be.a(\"number\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.updated).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.width).to.be.a(\"number\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.height).to.be.a(\"number\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.iconLink).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.iconLinkFallback).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.wikiLink).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.imageLink).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.imageLinkFallback).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.gridImageLink).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.gridImageLinkFallback).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.types).to.be.a(\"array\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.avg24hPrice).to.be.a(\"number\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.link).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.sellFor).to.be.a(\"array\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.buyFor).to.be.a(\"array\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.bsgCategoryId).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.barters[0].requiredItems[0].item.weight).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\r\n    barters {\r\n        source\r\n        requiredItems {\r\n            item {\r\n                ...itemFragment\r\n            }\r\n        }\r\n        rewardItems {\r\n            item {\r\n                ...itemFragment\r\n            }\r\n        }\r\n    }\r\n}\r\n{{itemFragment}}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{tarko.dev.api}}",
					"host": [
						"{{tarko.dev.api}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crafts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status correct\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Has correct data\", function () {\r",
							"     pm.expect(pm.response.text()).to.include(\"requiredItems\");\r",
							"     pm.expect(pm.response.text()).to.include(\"rewardItems\");\r",
							"});\r",
							"\r",
							"pm.test(\"No errors\", function () {\r",
							"     pm.expect(pm.response.text()).to.not.include(\"errors\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\r\n    crafts {\r\n        source\r\n        duration\r\n        requiredItems {\r\n            item {\r\n                ...itemFragment\r\n            }\r\n        }\r\n        rewardItems {\r\n            item {\r\n                ...itemFragment\r\n            }\r\n        }\r\n    }\r\n}\r\n{{itemFragment}}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{tarko.dev.api}}",
					"host": [
						"{{tarko.dev.api}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Hideout Modules",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status correct\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Has correct data\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"itemRequirements\");\r",
							"    pm.expect(pm.response.text()).to.include(\"hideoutModules\");\r",
							"});\r",
							"\r",
							"pm.test(\"No errors\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"errors\");\r",
							"});\r",
							"\r",
							"pm.test(\"check common types\", function () {\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].id).to.be.a(\"number\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].name).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].level).to.be.a(\"number\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements).to.be.a(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct itemRequirements common types\", function () {\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.id).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.name).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.normalizedName).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.shortName).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.basePrice).to.be.a(\"number\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.updated).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.width).to.be.a(\"number\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.height).to.be.a(\"number\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.iconLink).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.iconLinkFallback).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.wikiLink).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.imageLink).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.imageLinkFallback).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.gridImageLink).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.gridImageLinkFallback).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.types).to.be.a(\"array\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.avg24hPrice).to.be.a(\"number\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.link).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.sellFor).to.be.a(\"array\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.buyFor).to.be.a(\"array\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.bsgCategoryId).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.hideoutModules[0].itemRequirements[0].item.weight).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\r\n  hideoutModules {\r\n      id\r\n      name\r\n      level\r\n      itemRequirements {\r\n          item {\r\n            ...itemFragment\r\n          }\r\n          count\r\n          quantity\r\n      }\r\n      moduleRequirements {\r\n          id\r\n          name\r\n          level\r\n      }\r\n  }\r\n}\r\n{{itemFragment}}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{tarko.dev.api}}",
					"host": [
						"{{tarko.dev.api}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Quests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status correct\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Has correct data\", function () {\r",
							"     pm.expect(pm.response.text()).to.include(\"quests\");\r",
							"     pm.expect(pm.response.text()).to.include(\"giver\");\r",
							"});\r",
							"\r",
							"pm.test(\"No errors\", function () {\r",
							"     pm.expect(pm.response.text()).to.not.include(\"errors\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct id type\", function () {\r",
							"     pm.expect(pm.response.json().data.quests[0].id).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct id type\", function () {\r",
							"     pm.expect(pm.response.json().data.quests[0].id).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct giver type\", function () {\r",
							"     pm.expect(pm.response.json().data.quests[0].giver.name).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct turnin type\", function () {\r",
							"     pm.expect(pm.response.json().data.quests[0].turnin.name).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct title type\", function () {\r",
							"     pm.expect(pm.response.json().data.quests[0].title).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct wikiLink match\", function () {\r",
							"     pm.expect(pm.response.json().data.quests[0].wikiLink).to.include(\"https://\");;\r",
							"});\r",
							"\r",
							"pm.test(\"correct exp type\", function () {\r",
							"     pm.expect(pm.response.json().data.quests[0].exp).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct unlocks type\", function () {\r",
							"     pm.expect(pm.response.json().data.quests[0].unlocks).to.be.a(\"array\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\r\n  quests {\r\n    id\r\n    giver {\r\n        id\r\n        name\r\n    }\r\n    turnin {\r\n        id\r\n        name\r\n    }\r\n    title\r\n    wikiLink\r\n    exp\r\n    unlocks\r\n    reputation {\r\n        trader {\r\n            name\r\n        }\r\n        amount\r\n    }\r\n    objectives {\r\n      id\r\n      type\r\n      target\r\n      number\r\n      location\r\n      targetItem {\r\n          ...itemFragment\r\n      }\r\n    }\r\n    requirements {\r\n      quests\r\n      level\r\n      prerequisiteQuests {\r\n          id\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n{{itemFragment}}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{tarko.dev.api}}",
					"host": [
						"{{tarko.dev.api}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Server Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status correct\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Has correct data\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"messages\");\r",
							"    pm.expect(pm.response.text()).to.include(\"Website\");\r",
							"});\r",
							"\r",
							"pm.test(\"No errors\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"errors\");\r",
							"});\r",
							"\r",
							"pm.test(\"check general status common types\", function () {\r",
							"    pm.expect(pm.response.json().data.status.generalStatus.name).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.status.generalStatus.message).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.status.generalStatus.status).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"check general status name\", function () {\r",
							"    pm.expect(pm.response.json().data.status.generalStatus.name).to.eq(\"Global\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\r\n    status {\r\n        generalStatus {\r\n            name\r\n            message\r\n            status\r\n        }\r\n        messages {\r\n            content\r\n            time\r\n            type\r\n            solveTime\r\n        }\r\n        currentStatuses {\r\n            name\r\n            message\r\n            status\r\n        }\r\n    }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{tarko.dev.api}}",
					"host": [
						"{{tarko.dev.api}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Item by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status correct\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Has correct data\", function () {\r",
							"     pm.expect(pm.response.text()).to.include(\"updated\");\r",
							"});\r",
							"\r",
							"pm.test(\"No errors\", function () {\r",
							"     pm.expect(pm.response.text()).to.not.include(\"errors\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query($id: ID!) {\r\n    item(id: $id) {\r\n        ...itemFragment\r\n    }\r\n}\r\n{{itemFragment}}",
						"variables": "{\r\n    \"id\": \"5b7c710788a4506dec015957\"\r\n}"
					}
				},
				"url": {
					"raw": "{{tarko.dev.api}}",
					"host": [
						"{{tarko.dev.api}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Items by Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status correct\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Has correct data\", function () {\r",
							"     pm.expect(pm.response.text()).to.include(\"Graphics card\");\r",
							"});\r",
							"\r",
							"pm.test(\"No errors\", function () {\r",
							"     pm.expect(pm.response.text()).to.not.include(\"errors\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query($name: String!) {\r\n    itemsByName(name: $name) {\r\n        ...itemFragment\r\n    }\r\n}\r\n{{itemFragment}}",
						"variables": "{\r\n    \"name\": \"GPU\"\r\n}"
					}
				},
				"url": {
					"raw": "{{tarko.dev.api}}",
					"host": [
						"{{tarko.dev.api}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Item by Name - Detailed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status correct\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"No errors\", function () {\r",
							"     pm.expect(pm.response.text()).to.not.include(\"errors\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct item id\", function () {\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].id).to.eq(\"5733279d245977289b77ec24\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct item name\", function () {\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].name).to.eq(\"Car battery\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct item normalizedName\", function () {\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].normalizedName).to.eq(\"car-battery\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct item shortName\", function () {\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].shortName).to.eq(\"Car batt.\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct item common number types\", function () {\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].height).to.be.a(\"number\");\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].width).to.be.a(\"number\");\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].basePrice).to.be.a(\"number\");\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].avg24hPrice).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct item common link data\", function () {\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].iconLink).to.include(\"https://\");\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].iconLinkFallback).to.include(\"https://\");\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].wikiLink).to.include(\"https://\");\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].imageLink).to.include(\"https://\");\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].imageLinkFallback).to.include(\"https://\");\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].gridImageLink).to.include(\"https://\");\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].gridImageLinkFallback).to.include(\"https://\");\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].link).to.include(\"https://\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct item types to be an array\", function () {\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].types).to.be.a(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct item buyFor and sellFor to be an array\", function () {\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].buyFor).to.be.a(\"array\");\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].sellFor).to.be.a(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"correct item types to be an array\", function () {\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].hasGrid).to.eq(null);\r",
							"});\r",
							"\r",
							"pm.test(\"recoilModifier should be null for a non-weapon item\", function () {\r",
							"     pm.expect(pm.response.json().data.itemsByName[0].recoilModifier).to.eq(null);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\r\n  itemsByName(name: \"car battery\") {\r\n    id\r\n    name\r\n    normalizedName\r\n    shortName\r\n    basePrice\r\n    recoilModifier\r\n    updated\r\n    width\r\n    height\r\n    iconLink\r\n    iconLinkFallback\r\n    wikiLink\r\n    imageLink\r\n    imageLinkFallback\r\n    gridImageLink\r\n    gridImageLinkFallback\r\n    types\r\n    avg24hPrice\r\n    hasGrid\r\n    link\r\n    sellFor {\r\n      price\r\n      source\r\n    }\r\n    buyFor {\r\n      price\r\n      source\r\n    }\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{tarko.dev.api}}",
					"host": [
						"{{tarko.dev.api}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Items by Type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status correct\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Has correct data\", function () {\r",
							"     pm.expect(pm.response.text()).to.include(\"Graphics card\");\r",
							"     pm.expect(pm.response.text()).to.include(\"LEDX\");\r",
							"     pm.expect(pm.response.text()).to.include(\"Dollars\");\r",
							"     pm.expect(pm.response.text()).to.include(\"Euros\");\r",
							"});\r",
							"\r",
							"pm.test(\"No errors\", function () {\r",
							"     pm.expect(pm.response.text()).to.not.include(\"errors\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query($type: ItemType!) {\r\n    itemsByType(type: $type) {\r\n        ...itemFragment\r\n    }\r\n}\r\n{{itemFragment}}",
						"variables": "{\r\n    \"type\": \"any\"\r\n}"
					}
				},
				"url": {
					"raw": "{{tarko.dev.api}}",
					"host": [
						"{{tarko.dev.api}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Trader Reset Time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status correct\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Has all traders\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"prapor\");\r",
							"    pm.expect(pm.response.text()).to.include(\"therapist\");\r",
							"    pm.expect(pm.response.text()).to.include(\"mechanic\");\r",
							"    pm.expect(pm.response.text()).to.include(\"jaeger\");\r",
							"    pm.expect(pm.response.text()).to.include(\"ragman\");\r",
							"    pm.expect(pm.response.text()).to.include(\"peacekeeper\");\r",
							"    pm.expect(pm.response.text()).to.include(\"skier\");\r",
							"    pm.expect(pm.response.text()).to.include(\"fence\");\r",
							"});\r",
							"\r",
							"pm.test(\"No errors\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"errors\");\r",
							"});\r",
							"\r",
							"pm.test(\"check common types\", function () {\r",
							"    pm.expect(pm.response.json().data.traderResetTimes[0].name).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().data.traderResetTimes[0].resetTimestamp).to.be.a(\"string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\r\n    traderResetTimes {\r\n        name\r\n        resetTimestamp\r\n    }\r\n}",
						"variables": "{\r\n    \"name\": \"5447b5f14bdc2d61278b4567\"\r\n}"
					}
				},
				"url": {
					"raw": "{{tarko.dev.api}}",
					"host": [
						"{{tarko.dev.api}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// pm.environment.set(\"tarko.dev.api\", \"http://127.0.0.1:8787/graphql\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "tarko.dev.api",
			"value": "http://localhost:8787/graphql"
		},
		{
			"key": "itemFragment",
			"value": "fragment itemFragment on Item {id\n        name\n        normalizedName\n        shortName\n        basePrice\n        updated\n        width\n        height\n        iconLink\n        iconLinkFallback\n        wikiLink\n        imageLink\n        imageLinkFallback\n        gridImageLink\n        gridImageLinkFallback\n        types\n        avg24hPrice\n        accuracyModifier\n        recoilModifier\n        ergonomicsModifier\n        hasGrid\n        blocksHeadphones\n        traderPrices {\n            price\n            trader {\n                id\n                name\n            }\n        }\n        link\n        lastLowPrice\n        changeLast48h\n        changeLast48hPercent\n        low24hPrice\n        high24hPrice\n        sellFor {\n            source\n            price\n            currency\n            requirements {\n                type\n                value\n            }\n        }\n        buyFor {\n            source\n            price\n            currency\n            requirements {\n                type\n                value\n            }\n        }\n        containsItems {\n            count\n        }\n        bsgCategoryId\n        weight\n        velocity\n        loudness\n        translation(languageCode: en) {\n            name\n            shortName\n            description\n        }}"
		}
	]
}